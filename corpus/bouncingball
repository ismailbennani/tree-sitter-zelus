==================================
Bouncingball
==================================

(** Bouncing ball. *)

(* [ground x] returns the position in [y] *)
let ground x = World.ground(x)
let ground_abs x = World.ground_abs(x)

let x_0 = 0.0
let y_0 = 8.0
let x_v = 0.72
let g = 9.81
let loose = 0.8

(* The bouncing ball *)
let hybrid ball(x, y_0) = (y, y_v, z) where
 rec
     der y = y_v init y_0
 and
     der y_v = -. g init 0.0 reset z -> (-. loose *. last y_v)
 and z = up(ground(x) -. y)

(* Main entry point *)
let hybrid main () =
 let der x = x_v init x_0 in
 let (y, _, z) = ball(x, y_0) in
 let ok = present (period (0.04)) -> () | z -> () in
 present ok() -> Showball.show (x fby x) (y fby y) x y;
 ()

---

(source_file
  (comment)
  (comment)
  (fun_declaration (fun_name) (identifier)
    (application_expression (constructor) (identifier) (identifier))
  )
  (fun_declaration (fun_name) (identifier)
    (application_expression (constructor) (identifier) (identifier))
  )

  (let_declaration (identifier) (float))
  (let_declaration (identifier) (float))
  (let_declaration (identifier) (float))
  (let_declaration (identifier) (float))
  (let_declaration (identifier) (float))

  (comment)
  (fun_declaration (kind) (fun_name)
    (pattern (pattern (identifier)) (pattern (identifier)))
    (tuple_expression (identifier) (tuple_expression (identifier) (identifier)))

    (der_equation (identifier) (identifier)  (identifier))

    (der_equation (identifier) (prfx) (identifier)
      (float)
      (der_reset_handler (identifier)
        (prfx) (identifier) (infx)  (last_expression (identifier))
      )
    )

    (eq_equation (pattern (identifier))
      (prfx) (application_expression (identifier) (identifier)) (infx) (identifier)
    )
  )

  (comment)
  (fun_declaration (kind) (fun_name)
    (let_expression (der_equation (identifier) (identifier) (identifier))
    (let_expression
      (eq_equation
        (pattern
          (pattern
            (pattern
              (pattern (identifier))
              (pattern)
            )
            (pattern (identifier))
          )
        )
        (application_expression (identifier)
          (tuple_expression (identifier) (identifier)))
      )
    (let_expression
      (eq_equation (pattern (identifier))
        (present_expression
          (present_handler_expression (period_expression (float)))
          (present_handler_expression (identifier))
        )
      )
      (present_expression
        (present_handler_expression (identifier)
          (application_expression
            (constructor) (identifier)
            (identifier) (infx) (identifier)
            (identifier) (infx) (identifier)
            (identifier)
            (identifier)
          )
        )
      )
    )))
  )
)
